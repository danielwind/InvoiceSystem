package com.honeyhousebakery.invoice.app;

import com.honeyhousebakery.invoice.datasource.MongoDBConnector;
import com.honeyhousebakery.invoice.domain.Client;
import com.honeyhousebakery.invoice.domain.Invoice;
import com.honeyhousebakery.invoice.domain.Order;
import com.honeyhousebakery.invoice.domain.Purchase;
import com.honeyhousebakery.invoice.pdf.PDFManager;
import com.honeyhousebakery.invoice.utils.DateUtil;
import com.honeyhousebakery.invoice.utils.FilePathUtil;
import com.honeyhousebakery.invoice.utils.OrderType;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.net.UnknownHostException;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JWindow;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author danielwind
 */
public class Application extends javax.swing.JFrame {
    
    private static List<Client> clients = null;
    
    private static final DefaultListModel listModel = new DefaultListModel();
    
    private static Order currentOrder = null; 
    
    private static MongoDBConnector mongoDB = null;
    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        addressTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        contactTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        invoiceIdTxt = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        invoiceButton = new javax.swing.JButton();
        calculatedTotalTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        orderWithDiscountTotalTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        descriptionInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        priceInput = new javax.swing.JTextField();
        quantityInput = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        invoiceDateTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        orderRetrievalBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        invoicesTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Top.png")));
        getContentPane().setLayout(new java.awt.FlowLayout());

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(978, 800));

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        jList1.setModel(listModel);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Select Brand Customer");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel3.setText("Full Name");

        jLabel2.setText("Address");

        jLabel4.setText("Contact Information");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(28, 28, 28)
                        .add(addressTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 262, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel3)
                        .add(16, 16, 16)
                        .add(nameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 262, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(contactTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(nameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addressTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(contactTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBox1.setText("Retail Customer");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setText("Invoice ID");

        invoiceIdTxt.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        invoiceIdTxt.setText(currentOrder.getInvoiceId());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel6.setPreferredSize(new java.awt.Dimension(751, 400));

        purchaseTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        purchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Item Description", "Item Price ($)", "Quantity", "Line Total ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purchaseTable.setEditingColumn(1);
        purchaseTable.setEditingRow(1);
        purchaseTable.setGridColor(new java.awt.Color(204, 204, 204));
        purchaseTable.setRowHeight(20);
        purchaseTable.setShowGrid(true);
        jScrollPane2.setViewportView(purchaseTable);

        invoiceButton.setText("Generate Invoice ");
        invoiceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoiceButtonMouseClicked(evt);
            }
        });

        calculatedTotalTxt.setEditable(false);
        calculatedTotalTxt.setText("0.00");

        jLabel5.setText("Order Total ($)");

        jLabel8.setText("Applied Discount Total ($)");

        descriptionInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionInputActionPerformed(evt);
            }
        });

        jLabel9.setText("Description");

        jLabel10.setText("Price ($)");

        priceInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceInputActionPerformed(evt);
            }
        });

        quantityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityInputActionPerformed(evt);
            }
        });

        jLabel11.setText("Quantity");

        jButton1.setText("ADD PURCHASE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jPanel6Layout.createSequentialGroup()
                            .add(jLabel5)
                            .add(18, 18, 18)
                            .add(calculatedTotalTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel6Layout.createSequentialGroup()
                            .add(jLabel8)
                            .add(18, 18, 18)
                            .add(orderWithDiscountTotalTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(descriptionInput)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(priceInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(8, 8, 8))
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(jLabel9)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(jLabel10)
                                        .add(58, 58, 58)))
                                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(quantityInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel11))
                                .add(18, 18, 18)
                                .add(jButton1))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 707, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(563, 563, 563)
                        .add(invoiceButton)))
                .add(18, 18, 18))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(jLabel11)))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(descriptionInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(priceInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(quantityInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(25, 25, 25)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(20, 20, 20)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(calculatedTotalTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(orderWithDiscountTotalTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 32, Short.MAX_VALUE)
                .add(invoiceButton)
                .addContainerGap())
        );

        invoiceDateTxt.setText(DateUtil.invoiceGUIFormattedDate());

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(92, 92, 92)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(invoiceIdTxt)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(invoiceDateTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(200, 200, 200)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jCheckBox1))))
                .add(1064, 1064, 1064))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(30, 30, 30)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 68, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(invoiceIdTxt))
                        .add(4, 4, 4))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(60, 60, 60))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(invoiceDateTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Invoicing", jPanel1);

        jLabel7.setText("All Stored Orders");

        orderRetrievalBtn.setText("Retrieve");
        orderRetrievalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderRetrievalBtnActionPerformed(evt);
            }
        });

        invoicesTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        invoicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Invoice ID", "Date", "Client", "Total ($)", "Discount ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoicesTable.setColumnSelectionAllowed(true);
        invoicesTable.setGridColor(new java.awt.Color(204, 204, 204));
        invoicesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        invoicesTable.setShowGrid(true);
        jScrollPane3.setViewportView(invoicesTable);
        invoicesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jPanel2.setBackground(new java.awt.Color(251, 250, 250));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 811, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 151, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(72, 72, 72)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(orderRetrievalBtn))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(orderRetrievalBtn)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 482, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17))
        );

        jTabbedPane1.addTab("Reporting", jPanel4);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void invoiceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceButtonMouseClicked
        
        if(jList1.getSelectedIndex() != -1){
            //show alert
            int reply = JOptionPane.showConfirmDialog(this, "Proceed Submitting Invoice?", "HHB Invoice System Alert", JOptionPane.YES_NO_OPTION);
        
            if(reply == JOptionPane.YES_OPTION){
                
                Client selectedClient = null;
                
                for (Client client : clients) {
                    if (client.getName().equals(jList1.getSelectedValue())) {
                        selectedClient = client;
                        break;
                    }
                }
                
                //store client in order obj
                currentOrder.setClient(selectedClient);
                
                //set order type as WHOLESALE
                currentOrder.setType(OrderType.WHOLESALE);
                
                //in case it has been edited from the invoice editor
                currentOrder.setDate(invoiceDateTxt.getText());
                
                //if discount has been applied save it to the order object
                currentOrder.setOrderTotalWithDiscount(orderWithDiscountTotalTxt.getText());
                
                //generate pdf
                PDFManager.generatePDFInvoice(currentOrder);
                
                //save order in DB
                saveOrderInDatabase(currentOrder);
                
                //clear everything
                resetForm();
             }
            
        } else {
            //retail customer should be selected
            if(jCheckBox1.isSelected()){
                
                if(!nameTxt.getText().isEmpty() && !addressTxt.getText().isEmpty() && !contactTxt.getText().isEmpty()){
                   
                   int reply = JOptionPane.showConfirmDialog(this, "Proceed Submitting Invoice?", "HHB Invoice System Alert", JOptionPane.YES_NO_OPTION);
                   
                   if(reply == JOptionPane.YES_OPTION){
                       
                       String clientName = nameTxt.getText();
                       String clientAddress = addressTxt.getText();
                       String clientContactInfo = contactTxt.getText();
                   
                       Client client = new Client(clientName, clientAddress, clientContactInfo);
                       
                       currentOrder.setClient(client);
                       
                       //set order type to RETAIL
                       currentOrder.setType(OrderType.RETAIL);
                       
                       //in case it has been edited from the invoice editor
                       currentOrder.setDate(invoiceDateTxt.getText());
                       
                       //if discount has been applied save it to the order object
                       currentOrder.setOrderTotalWithDiscount(orderWithDiscountTotalTxt.getText());
                       
                       //generate pdf
                       PDFManager.generatePDFInvoice(currentOrder);
                       
                       //save order in DB
                       saveOrderInDatabase(currentOrder);
                       
                       //clear everything
                       resetForm();
                   }
                   
                    
                } else {
                   JOptionPane.showMessageDialog(this, "Please enter complete non-stored customer information"); 
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select a brand customer from the menu\n or enter a non-stored customer");
            }
        }
        
    }//GEN-LAST:event_invoiceButtonMouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        
        if(evt.getSource() == jCheckBox1){
            if(jCheckBox1.isSelected()){
                jList1.clearSelection();
            }
        }
        
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

        if(evt.getSource() == jList1){             
            if(jCheckBox1.isSelected() && jList1.getSelectedIndex() != -1){
                jCheckBox1.setSelected(false);
            }
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void descriptionInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionInputActionPerformed

    private void priceInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceInputActionPerformed

    private void quantityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityInputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
       if(!descriptionInput.getText().isEmpty() && !priceInput.getText().isEmpty() && !quantityInput.getText().isEmpty()){
           
           //add line to table
           DefaultTableModel model = (DefaultTableModel) purchaseTable.getModel();
           
           Purchase purchase = new Purchase();
           purchase.setItemDescription(descriptionInput.getText());
           purchase.setItemPrice(new BigDecimal(priceInput.getText()));
           purchase.setQuantity(Integer.parseInt(quantityInput.getText()));
           
           purchase.calculateLineTotal();
           
           model.insertRow(purchaseTable.getRowCount() - 1, purchase.toObjectArray());
           
           currentOrder.addPurchase(purchase);
           
           updateOrderTotal();
           
           //clear fields
           descriptionInput.setText("");
           priceInput.setText("");
           quantityInput.setText("");
           
           //gc
           purchase = null;
           
       } else {
           JOptionPane.showMessageDialog(this, "Please fill out all necessary fields...");
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void orderRetrievalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderRetrievalBtnActionPerformed
        
        List<Invoice> invoices = mongoDB.queryForOrders();
            
        //clear table 
        while(invoicesTable.getRowCount() > 1) {
               ((DefaultTableModel) invoicesTable.getModel()).removeRow(0);
        }
            
            
        DefaultTableModel model = (DefaultTableModel) invoicesTable.getModel();
           
        if(invoices != null){
                
            for (int i = 0; i < invoices.size(); i++) {
                //add line to table
                model.insertRow(i, invoices.get(i).toObjectArray()); 
            }
        }
    }//GEN-LAST:event_orderRetrievalBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /*
        if(!newKeyField.getText().isEmpty()){
            //clean stuff after successful processing
            //newKeyField.setText("");
            invoiceIdTxt.setText(currentOrder.getInvoiceId());
        }else {
            JOptionPane.showMessageDialog(null, "Please enter order ID.");
        }
        */
    }//GEN-LAST:event_jButton2ActionPerformed

    private void updateOrderTotal() {
        
        calculatedTotalTxt.setText(currentOrder.getOrderTotalAmount().toPlainString());
    }
    
    private void saveOrderInDatabase(Order order) {
            mongoDB.saveOrder(order);
    }
    
    private void resetForm() {
        
        currentOrder = new Order(mongoDB.getLastExistingPlusOneSequence());
        invoiceDateTxt.setText(DateUtil.invoiceGUIFormattedDate());
        invoiceIdTxt.setText(currentOrder.getInvoiceId());
                       
        nameTxt.setText("");
        addressTxt.setText("");
        contactTxt.setText("");
        jCheckBox1.setSelected(false);
        jList1.clearSelection();
        orderWithDiscountTotalTxt.setText("");
        calculatedTotalTxt.setText("0.00");
        
        //clear table        
        while(purchaseTable.getRowCount() > 1) {
            ((DefaultTableModel) purchaseTable.getModel()).removeRow(0);
        }
        
    }
    
    /**
     * @param args the command line arguments
     * @throws UnknownHostException
     */
    public static void main(String args[]) throws UnknownHostException {
        
        try {

            //MAC-OSX only
            System.setProperty("com.apple.mrj.application.apple.menu.about.name", "Honey House Bakery Invoice System");
            
            //instantiate MongoDB
            mongoDB = new MongoDBConnector();
            
            //get clients list
            clients = mongoDB.getClientList();

            //create client directories
            FilePathUtil.createInvoicesMainDirectoryTreeStructure(clients);
            
            //create new order
           currentOrder = new Order(mongoDB.getLastExistingPlusOneSequence());
            
            
            //get the UI Look and Feel of the host operating system
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
               
               //get Screen dimensions
                Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                
                
                
               //splash screen 
               JWindow splashWindow = new JWindow();
               splashWindow.getContentPane().add(new JLabel("loading", SwingConstants.CENTER));
               
               splashWindow.setSize(700, 300);
               splashWindow.setVisible(true);
               
               //center
               int splashX = (int) ((dimension.getWidth() - splashWindow.getWidth()) / 2);
               int splashY = (int) ((dimension.getHeight() - splashWindow.getHeight()) / 2);
       
               splashWindow.setLocation(splashX, splashY);
               
               try {
                   Thread.sleep(3000);
               } catch(InterruptedException e) {
                   e.printStackTrace();
               }
               
               splashWindow.setVisible(false);
               
               JFrame applicationFrame = new Application(); 
               applicationFrame.setVisible(true);
               int width = (int) dimension.getWidth();
               int height = (int) dimension.getHeight();
               
               applicationFrame.setSize(width, height);
               
               //center
               int x = (int) ((dimension.getWidth() - applicationFrame.getWidth()) / 2);
               int y = (int) ((dimension.getHeight() - applicationFrame.getHeight()) / 2);
       
               applicationFrame.setLocation(x, y);
       
               //maximize window
               applicationFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
               
                for (Client client : clients) {
                    listModel.addElement(client.getName());
                } 
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTxt;
    private javax.swing.JTextField calculatedTotalTxt;
    private javax.swing.JTextField contactTxt;
    private javax.swing.JTextField descriptionInput;
    private javax.swing.JButton invoiceButton;
    private javax.swing.JTextField invoiceDateTxt;
    private javax.swing.JLabel invoiceIdTxt;
    private javax.swing.JTable invoicesTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JButton orderRetrievalBtn;
    private javax.swing.JTextField orderWithDiscountTotalTxt;
    private javax.swing.JTextField priceInput;
    private javax.swing.JTable purchaseTable;
    private javax.swing.JTextField quantityInput;
    // End of variables declaration//GEN-END:variables

}
